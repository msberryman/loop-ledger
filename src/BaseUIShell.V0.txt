// =============================================
// Loop Ledger â€” Base UI Scaffold v0.1
// Purpose: Lock a stable shell + routes + storage
// You can paste/replace file-by-file. Keep AppShell fixed.
// =============================================

// ------------------------------
// src/ui/tokens.ts
// ------------------------------
export const tokens = {
  radius: {
    sm: '0.375rem',
    md: '0.75rem',
    lg: '1rem',
  },
  spacing: {
    xs: '0.25rem',
    sm: '0.5rem',
    md: '0.75rem',
    lg: '1rem',
    xl: '1.5rem',
  },
  font: {
    base: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif',
    size: {
      sm: '0.875rem',
      base: '1rem',
      lg: '1.125rem',
      xl: '1.25rem',
    },
  },
  shadow: {
    card: '0 6px 18px rgba(0,0,0,0.08)'
  },
  color: {
    bg: '#0d0f12',
    surface: '#14171b',
    text: '#f4f6f8',
    textMuted: '#b5bdc8',
    brand: '#5CC8FF',
    border: '#232931',
    danger: '#ff6b6b',
    success: '#3ddc97',
  }
};

// ------------------------------
// src/ui/Card.tsx
// ------------------------------
import React from 'react';
import { tokens } from './tokens';

export const Card: React.FC<React.PropsWithChildren<{className?: string;}>> = ({ children, className }) => (
  <div
    className={className}
    style={{
      background: tokens.color.surface,
      borderRadius: tokens.radius.lg,
      padding: tokens.spacing.lg,
      boxShadow: tokens.shadow.card,
      border: `1px solid ${tokens.color.border}`,
    }}
  >
    {children}
  </div>
);

// ------------------------------
// src/ui/Button.tsx
// ------------------------------
import React from 'react';
import { tokens } from './tokens';

type ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {
  variant?: 'primary' | 'ghost' | 'danger';
};

export const Button: React.FC<React.PropsWithChildren<ButtonProps>> = ({
  children,
  variant = 'primary',
  style,
  ...rest
}) => {
  const bg = variant === 'primary' ? tokens.color.brand : variant === 'danger' ? tokens.color.danger : 'transparent';
  const color = variant === 'ghost' ? tokens.color.text : '#0a0a0a';
  const border = variant === 'ghost' ? `1px solid ${tokens.color.border}` : 'none';
  return (
    <button
      {...rest}
      style={{
        background: bg,
        color,
        borderRadius: tokens.radius.md,
        padding: `${tokens.spacing.sm} ${tokens.spacing.lg}`,
        border,
        cursor: 'pointer',
        fontFamily: tokens.font.base,
        fontSize: tokens.font.size.base,
        ...style,
      }}
    >
      {children}
    </button>
  );
};

// ------------------------------
// src/ui/Input.tsx
// ------------------------------
import React from 'react';
import { tokens } from './tokens';

type Props = React.InputHTMLAttributes<HTMLInputElement> & { label?: string };

export const Input: React.FC<Props> = ({ label, style, ...rest }) => (
  <label style={{ display: 'grid', gap: tokens.spacing.xs }}>
    {label && <span style={{ color: tokens.color.textMuted, fontSize: tokens.font.size.sm }}>{label}</span>}
    <input
      {...rest}
      style={{
        background: '#0e1116',
        color: tokens.color.text,
        border: `1px solid ${tokens.color.border}`,
        borderRadius: tokens.radius.sm,
        padding: `${tokens.spacing.sm} ${tokens.spacing.md}`,
        fontFamily: tokens.font.base,
        fontSize: tokens.font.size.base,
        outline: 'none'
      }}
    />
  </label>
);

// ------------------------------
// src/ui/Nav.tsx
// ------------------------------
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { tokens } from './tokens';

export const NAV = [
  { path: '/home', label: 'Home' },
  { path: '/loops', label: 'Loops' },
  { path: '/expenses', label: 'Expenses' },
  { path: '/tips', label: 'Tips' },
  { path: '/settings', label: 'Settings' },
] as const;

export const TopNav: React.FC = () => {
  const { pathname } = useLocation();
  return (
    <nav
      style={{
        position: 'sticky', top: 0, zIndex: 10,
        background: tokens.color.bg,
        borderBottom: `1px solid ${tokens.color.border}`,
      }}
    >
      <div style={{ display: 'flex', gap: tokens.spacing.md, padding: tokens.spacing.md, maxWidth: 980, margin: '0 auto' }}>
        {NAV.map(item => {
          const active = pathname === item.path;
          return (
            <Link
              key={item.path}
              to={item.path}
              style={{
                color: active ? tokens.color.brand : tokens.color.text,
                textDecoration: 'none',
                padding: `${tokens.spacing.xs} ${tokens.spacing.sm}`,
                borderRadius: tokens.radius.sm,
                background: active ? 'rgba(92,200,255,0.12)' : 'transparent',
              }}
            >{item.label}</Link>
          );
        })}
      </div>
    </nav>
  );
};

// ------------------------------
// src/ui/Layout.tsx
// ------------------------------
import React from 'react';
import { tokens } from './tokens';
import { TopNav } from './Nav';

export const Layout: React.FC<React.PropsWithChildren> = ({ children }) => (
  <div style={{ minHeight: '100svh', background: tokens.color.bg, color: tokens.color.text, fontFamily: tokens.font.base }}>
    <TopNav />
    <main style={{ maxWidth: 980, margin: '0 auto', padding: tokens.spacing.lg }}>
      {children}
    </main>
  </div>
);

// ------------------------------
// src/lib/flags.ts
// ------------------------------
export const flags = {
  MAPS_AUTOCOMPLETE: import.meta.env.VITE_FF_MAPS_AUTOCOMPLETE === 'true',
};

// ------------------------------
// src/lib/storage.ts
// ------------------------------
// Stable storage contract for base UI
export type Loop = { id: string; date: string; course: string; miles?: number; notes?: string };
export type Expense = { id: string; date: string; category: string; amount: number; notes?: string };
export type Tip = { id: string; date: string; source: string; amount: number; notes?: string };
export type Settings = { homeAddress: string; mileageRate: number; autoMileage: boolean };

const k = {
  loops: 'loops',
  expenses: 'expenses',
  tips: 'tips',
  settings: 'settings',
} as const;

function read<T>(key: string, fallback: T): T {
  const raw = localStorage.getItem(key);
  if (!raw) return fallback;
  try { return JSON.parse(raw) as T; } catch { return fallback; }
}

function write<T>(key: string, value: T) {
  localStorage.setItem(key, JSON.stringify(value));
}

export const storage = {
  getLoops: () => read<Loop[]>(k.loops, []),
  setLoops: (v: Loop[]) => write(k.loops, v),
  getExpenses: () => read<Expense[]>(k.expenses, []),
  setExpenses: (v: Expense[]) => write(k.expenses, v),
  getTips: () => read<Tip[]>(k.tips, []),
  setTips: (v: Tip[]) => write(k.tips, v),
  getSettings: () => read<Settings>(k.settings, { homeAddress: '', mileageRate: 0.67, autoMileage: false }),
  setSettings: (v: Settings) => write(k.settings, v),
};

// ------------------------------
// src/pages/Home.tsx
// ------------------------------
import React from 'react';
import { Card } from '../ui/Card';
import { storage } from '../lib/storage';

export default function HomePage() {
  const loops = storage.getLoops();
  const tips = storage.getTips();
  const expenses = storage.getExpenses();
  const gross = tips.reduce((a, t) => a + t.amount, 0);
  const spend = expenses.reduce((a, e) => a + e.amount, 0);
  return (
    <>
      <h1 style={{ marginBottom: '1rem' }}>Loop Ledger</h1>
      <div style={{ display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fit, minmax(220px, 1fr))' }}>
        <Card>
          <div>Loops</div>
          <div style={{ fontSize: '1.75rem', fontWeight: 700 }}>{loops.length}</div>
        </Card>
        <Card>
          <div>Tips</div>
          <div style={{ fontSize: '1.75rem', fontWeight: 700 }}>${gross.toFixed(2)}</div>
        </Card>
        <Card>
          <div>Expenses</div>
          <div style={{ fontSize: '1.75rem', fontWeight: 700 }}>${spend.toFixed(2)}</div>
        </Card>
      </div>
    </>
  );
}

// ------------------------------
// src/pages/Loops.tsx
// ------------------------------
import React, { useState } from 'react';
import { storage, Loop } from '../lib/storage';
import { Card } from '../ui/Card';
import { Input } from '../ui/Input';
import { Button } from '../ui/Button';

export default function LoopsPage() {
  const [items, setItems] = useState<Loop[]>(storage.getLoops());
  const [date, setDate] = useState('');
  const [course, setCourse] = useState('');
  const [notes, setNotes] = useState('');

  const add = () => {
    if (!date || !course) return;
    const next = [{ id: crypto.randomUUID(), date, course, notes }, ...items];
    setItems(next); storage.setLoops(next);
    setDate(''); setCourse(''); setNotes('');
  };

  return (
    <>
      <h1>Loops</h1>
      <Card>
        <div style={{ display: 'grid', gap: 8, gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>
          <Input label="Date" type="date" value={date} onChange={e => setDate(e.target.value)} />
          <Input label="Course" placeholder="Course name" value={course} onChange={e => setCourse(e.target.value)} />
          <Input label="Notes" placeholder="Optional" value={notes} onChange={e => setNotes(e.target.value)} />
          <div style={{ alignSelf: 'end' }}><Button onClick={add}>Add Loop</Button></div>
        </div>
      </Card>

      <div style={{ display: 'grid', gap: 12, marginTop: 16 }}>
        {items.map(it => (
          <Card key={it.id}>
            <div style={{ display: 'flex', justifyContent: 'space-between' }}>
              <strong>{it.course}</strong>
              <span>{it.date}</span>
            </div>
            {it.notes && <div style={{ opacity: 0.8, marginTop: 6 }}>{it.notes}</div>}
          </Card>
        ))}
      </div>
    </>
  );
}

// ------------------------------
// src/pages/Expenses.tsx
// ------------------------------
import React, { useState } from 'react';
import { storage, Expense } from '../lib/storage';
import { Card } from '../ui/Card';
import { Input } from '../ui/Input';
import { Button } from '../ui/Button';

export default function ExpensesPage() {
  const [items, setItems] = useState<Expense[]>(storage.getExpenses());
  const [date, setDate] = useState('');
  const [category, setCategory] = useState('Mileage');
  const [amount, setAmount] = useState('');

  const add = () => {
    const a = parseFloat(amount);
    if (!date || !category || isNaN(a)) return;
    const next = [{ id: crypto.randomUUID(), date, category, amount: a }, ...items];
    setItems(next); storage.setExpenses(next);
    setDate(''); setCategory('Mileage'); setAmount('');
  };

  return (
    <>
      <h1>Expenses</h1>
      <Card>
        <div style={{ display: 'grid', gap: 8, gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>
          <Input label="Date" type="date" value={date} onChange={e => setDate(e.target.value)} />
          <Input label="Category" value={category} onChange={e => setCategory(e.target.value)} />
          <Input label="Amount" type="number" step="0.01" value={amount} onChange={e => setAmount(e.target.value)} />
          <div style={{ alignSelf: 'end' }}><Button onClick={add}>Add Expense</Button></div>
        </div>
      </Card>

      <div style={{ display: 'grid', gap: 12, marginTop: 16 }}>
        {items.map(it => (
          <Card key={it.id}>
            <div style={{ display: 'flex', justifyContent: 'space-between' }}>
              <strong>{it.category}</strong>
              <span>{it.date}</span>
            </div>
            <div style={{ marginTop: 6 }}>${it.amount.toFixed(2)}</div>
          </Card>
        ))}
      </div>
    </>
  );
}

// ------------------------------
// src/pages/Tips.tsx
// ------------------------------
import React, { useState } from 'react';
import { storage, Tip } from '../lib/storage';
import { Card } from '../ui/Card';
import { Input } from '../ui/Input';
import { Button } from '../ui/Button';

export default function TipsPage() {
  const [items, setItems] = useState<Tip[]>(storage.getTips());
  const [date, setDate] = useState('');
  const [source, setSource] = useState('Cash');
  const [amount, setAmount] = useState('');

  const add = () => {
    const a = parseFloat(amount);
    if (!date || !source || isNaN(a)) return;
    const next = [{ id: crypto.randomUUID(), date, source, amount: a }, ...items];
    setItems(next); storage.setTips(next);
    setDate(''); setSource('Cash'); setAmount('');
  };

  return (
    <>
      <h1>Tips</h1>
      <Card>
        <div style={{ display: 'grid', gap: 8, gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>
          <Input label="Date" type="date" value={date} onChange={e => setDate(e.target.value)} />
          <Input label="Source" value={source} onChange={e => setSource(e.target.value)} />
          <Input label="Amount" type="number" step="0.01" value={amount} onChange={e => setAmount(e.target.value)} />
          <div style={{ alignSelf: 'end' }}><Button onClick={add}>Add Tip</Button></div>
        </div>
      </Card>

      <div style={{ display: 'grid', gap: 12, marginTop: 16 }}>
        {items.map(it => (
          <Card key={it.id}>
            <div style={{ display: 'flex', justifyContent: 'space-between' }}>
              <strong>{it.source}</strong>
              <span>{it.date}</span>
            </div>
            <div style={{ marginTop: 6 }}>${it.amount.toFixed(2)}</div>
          </Card>
        ))}
      </div>
    </>
  );
}

// ------------------------------
// src/pages/Settings.tsx
// ------------------------------
import React, { useState } from 'react';
import { storage, Settings as SettingsType } from '../lib/storage';
import { Card } from '../ui/Card';
import { Input } from '../ui/Input';
import { Button } from '../ui/Button';
import { flags } from '../lib/flags';

export default function SettingsPage() {
  const [s, setS] = useState<SettingsType>(storage.getSettings());

  const save = () => storage.setSettings(s);

  return (
    <>
      <h1>Settings</h1>
      <Card>
        <div style={{ display: 'grid', gap: 12, gridTemplateColumns: '1fr 1fr' }}>
          <Input label="Home address"
                 placeholder="123 Main St, City, ST"
                 value={s.homeAddress}
                 onChange={e => setS({ ...s, homeAddress: e.target.value })} />
          <Input label="Mileage rate ($/mile)"
                 type="number" step="0.01"
                 value={s.mileageRate}
                 onChange={e => setS({ ...s, mileageRate: parseFloat(e.target.value || '0') })} />
          <label style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
            <input type="checkbox" checked={s.autoMileage} onChange={e => setS({ ...s, autoMileage: e.target.checked })} />
            Auto-calculate mileage on Add Loop
          </label>
          <div>
            <Button onClick={save}>Save</Button>
          </div>
        </div>
      </Card>

      {flags.MAPS_AUTOCOMPLETE ? (
        <Card className="mt-4" >
          <strong>Maps Autocomplete (flagged)</strong>
          <p style={{ opacity: 0.8 }}>UI placeholder â€” wire actual Google Places here without touching Settings contract.</p>
        </Card>
      ) : null}
    </>
  );
}

// ------------------------------
// src/AppShell.tsx
// ------------------------------
import React from 'react';
import { Layout } from './ui/Layout';
import { Routes, Route, Navigate } from 'react-router-dom';
import HomePage from './pages/Home';
import LoopsPage from './pages/Loops';
import ExpensesPage from './pages/Expenses';
import TipsPage from './pages/Tips';
import SettingsPage from './pages/Settings';

export default function AppShell() {
  // NOTE: Auth gate happens outside; this shell assumes user is signed in.
  // Keep this file FROZEN unless adding a new stable tab/route.
  return (
    <Layout>
      <Routes>
        <Route path="/home" element={<HomePage />} />
        <Route path="/loops" element={<LoopsPage />} />
        <Route path="/expenses" element={<ExpensesPage />} />
        <Route path="/tips" element={<TipsPage />} />
        <Route path="/settings" element={<SettingsPage />} />
        <Route path="*" element={<Navigate to="/home" replace />} />
      </Routes>
    </Layout>
  );
}

// ------------------------------
// src/App.tsx (minimal wrapper)
// ------------------------------
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import AppShell from './AppShell';

export default function App() {
  // Keep auth + provider wrappers here. Do not move routes into feature PRs.
  return (
    <BrowserRouter>
      <AppShell />
    </BrowserRouter>
  );
}

// ------------------------------
// CHECKS.md (Definition of Done for any PR)
// ------------------------------
/*
Before merge:
[ ] Routes /home, /loops, /expenses, /tips, /settings unchanged
[ ] TopNav renders all 5 tabs and navigates
[ ] Add + refresh works for loop/expense/tip
[ ] Settings save persists and reloads
[ ] No storage key or type changes without a migration plan
[ ] If feature is experimental, behind VITE_FF_* flag
[ ] CHANGELOG updated
*/

// ------------------------------
// CHANGELOG.md (start this at repo root)
// ------------------------------
/*
## v0.1.0 â€” Base UI locked
- Add AppShell with 5 stable routes
- Extract UI tokens + primitives (Card, Button, Input, Layout, TopNav)
- Add stable storage contract for loops/expenses/tips/settings
- Feature flags scaffold (VITE_FF_MAPS_AUTOCOMPLETE)
*/
